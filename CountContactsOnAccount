trigger CountContactsOnAccount on Contact (after insert, after update, after delete, after undelete) {

    
    Map<Id, Integer> accountContactCountMap = new Map<Id, Integer>(); // Define a map to hold the Account Ids and their contact counts

    // Collect all Account Ids from the trigger's context (insert, update, delete)
    if (Trigger.isInsert || Trigger.isUpdate || Trigger.isUndelete) {
        for (Contact con : Trigger.new) {
            if (con.AccountId != null) {
                accountContactCountMap.put(con.AccountId, 0);
            }
        }
    }

    if (Trigger.isDelete) {
        for (Contact con : Trigger.old) {
            if (con.AccountId != null) {
                accountContactCountMap.put(con.AccountId, 0);
            }
        }
    }

    // Query to count the number of Contacts related to each Account
    for (AggregateResult result : [
        SELECT AccountId, COUNT(Id) contactCount
        FROM Contact
        WHERE AccountId IN :accountContactCountMap.keySet()
        GROUP BY AccountId
    ]) {
        accountContactCountMap.put((Id)result.get('AccountId'), (Integer)result.get('contactCount'));
    }

    // Update the Account records with the new Contact count
    List<Account> accountsToUpdate = new List<Account>();

    for (Id accountId : accountContactCountMap.keySet()) {
        Account acc = new Account(Id = accountId);
        acc.Number_of_Contacts__c = accountContactCountMap.get(accountId); // Assuming a custom field for the count
        accountsToUpdate.add(acc);
    }

    // Perform the update to Accounts
    if (!accountsToUpdate.isEmpty()) {
        update accountsToUpdate;
    }
}
